/* tslint:disable */
/* eslint-disable */
/**
 * DevBook.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductCategoryCommand,
  ProductCategory,
  UpdateProductCategoryCommandDto,
} from '../models/index';
import {
    CreateProductCategoryCommandFromJSON,
    CreateProductCategoryCommandToJSON,
    ProductCategoryFromJSON,
    ProductCategoryToJSON,
    UpdateProductCategoryCommandDtoFromJSON,
    UpdateProductCategoryCommandDtoToJSON,
} from '../models/index';

export interface ProductCategoriesCreateRequest {
    createProductCategoryCommand: CreateProductCategoryCommand;
}

export interface ProductCategoriesDeleteRequest {
    id: string;
}

export interface ProductCategoriesGetAllRequest {
    pageSize?: number;
    offset?: number;
}

export interface ProductCategoriesGetByIdRequest {
    id: string;
}

export interface ProductCategoriesUpdateRequest {
    id: string;
    updateProductCategoryCommandDto: UpdateProductCategoryCommandDto;
}

/**
 * 
 */
export class BookStoreModuleProductCategoryEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async productCategoriesCreateRaw(requestParameters: ProductCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createProductCategoryCommand'] == null) {
            throw new runtime.RequiredError(
                'createProductCategoryCommand',
                'Required parameter "createProductCategoryCommand" was null or undefined when calling productCategoriesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/productCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductCategoryCommandToJSON(requestParameters['createProductCategoryCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productCategoriesCreate(requestParameters: ProductCategoriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productCategoriesCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productCategoriesDeleteRaw(requestParameters: ProductCategoriesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productCategoriesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/productCategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productCategoriesDelete(requestParameters: ProductCategoriesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productCategoriesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productCategoriesGetAllRaw(requestParameters: ProductCategoriesGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductCategory>>> {
        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['Offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/productCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductCategoryFromJSON));
    }

    /**
     */
    async productCategoriesGetAll(requestParameters: ProductCategoriesGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductCategory>> {
        const response = await this.productCategoriesGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productCategoriesGetByIdRaw(requestParameters: ProductCategoriesGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productCategoriesGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/productCategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCategoryFromJSON(jsonValue));
    }

    /**
     */
    async productCategoriesGetById(requestParameters: ProductCategoriesGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCategory> {
        const response = await this.productCategoriesGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productCategoriesUpdateRaw(requestParameters: ProductCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productCategoriesUpdate().'
            );
        }

        if (requestParameters['updateProductCategoryCommandDto'] == null) {
            throw new runtime.RequiredError(
                'updateProductCategoryCommandDto',
                'Required parameter "updateProductCategoryCommandDto" was null or undefined when calling productCategoriesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/productCategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProductCategoryCommandDtoToJSON(requestParameters['updateProductCategoryCommandDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productCategoriesUpdate(requestParameters: ProductCategoriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productCategoriesUpdateRaw(requestParameters, initOverrides);
    }

}
