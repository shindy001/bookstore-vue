/* tslint:disable */
/* eslint-disable */
/**
 * DevBook.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessTokenResponse,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  InfoRequest,
  InfoResponse,
  LoginRequest,
  RefreshRequest,
  RegisterRequest,
  ResendConfirmationEmailRequest,
  ResetPasswordRequest,
  TwoFactorRequest,
  TwoFactorResponse,
} from '../models/index';
import {
    AccessTokenResponseFromJSON,
    AccessTokenResponseToJSON,
    ForgotPasswordRequestFromJSON,
    ForgotPasswordRequestToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    InfoRequestFromJSON,
    InfoRequestToJSON,
    InfoResponseFromJSON,
    InfoResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    ResendConfirmationEmailRequestFromJSON,
    ResendConfirmationEmailRequestToJSON,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    TwoFactorRequestFromJSON,
    TwoFactorRequestToJSON,
    TwoFactorResponseFromJSON,
    TwoFactorResponseToJSON,
} from '../models/index';

export interface IdentityConfirmEmailGETRequest {
    userId?: string;
    code?: string;
    changedEmail?: string;
}

export interface IdentityForgotPasswordPOSTRequest {
    forgotPasswordRequest?: ForgotPasswordRequest;
}

export interface IdentityLoginPOSTRequest {
    useCookies?: boolean;
    useSessionCookies?: boolean;
    loginRequest?: LoginRequest;
}

export interface IdentityManage2faPOSTRequest {
    twoFactorRequest?: TwoFactorRequest;
}

export interface IdentityManageInfoPOSTRequest {
    infoRequest?: InfoRequest;
}

export interface IdentityRefreshPOSTRequest {
    refreshRequest?: RefreshRequest;
}

export interface IdentityRegisterPOSTRequest {
    registerRequest?: RegisterRequest;
}

export interface IdentityResendConfirmationEmailPOSTRequest {
    resendConfirmationEmailRequest?: ResendConfirmationEmailRequest;
}

export interface IdentityResetPasswordPOSTRequest {
    resetPasswordRequest?: ResetPasswordRequest;
}

/**
 * 
 */
export class IdentityApi extends runtime.BaseAPI {

    /**
     */
    async identityConfirmEmailGETRaw(requestParameters: IdentityConfirmEmailGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['changedEmail'] != null) {
            queryParameters['changedEmail'] = requestParameters['changedEmail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/confirmEmail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async identityConfirmEmailGET(requestParameters: IdentityConfirmEmailGETRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.identityConfirmEmailGETRaw(requestParameters, initOverrides);
    }

    /**
     */
    async identityForgotPasswordPOSTRaw(requestParameters: IdentityForgotPasswordPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/forgotPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotPasswordRequestToJSON(requestParameters['forgotPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async identityForgotPasswordPOST(requestParameters: IdentityForgotPasswordPOSTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.identityForgotPasswordPOSTRaw(requestParameters, initOverrides);
    }

    /**
     */
    async identityLoginPOSTRaw(requestParameters: IdentityLoginPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        if (requestParameters['useCookies'] != null) {
            queryParameters['useCookies'] = requestParameters['useCookies'];
        }

        if (requestParameters['useSessionCookies'] != null) {
            queryParameters['useSessionCookies'] = requestParameters['useSessionCookies'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async identityLoginPOST(requestParameters: IdentityLoginPOSTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenResponse> {
        const response = await this.identityLoginPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async identityManage2faPOSTRaw(requestParameters: IdentityManage2faPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwoFactorResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/manage/2fa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TwoFactorRequestToJSON(requestParameters['twoFactorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwoFactorResponseFromJSON(jsonValue));
    }

    /**
     */
    async identityManage2faPOST(requestParameters: IdentityManage2faPOSTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwoFactorResponse> {
        const response = await this.identityManage2faPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async identityManageInfoGETRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/manage/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async identityManageInfoGET(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.identityManageInfoGETRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async identityManageInfoPOSTRaw(requestParameters: IdentityManageInfoPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/manage/info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InfoRequestToJSON(requestParameters['infoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async identityManageInfoPOST(requestParameters: IdentityManageInfoPOSTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.identityManageInfoPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async identityRefreshPOSTRaw(requestParameters: IdentityRefreshPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async identityRefreshPOST(requestParameters: IdentityRefreshPOSTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenResponse> {
        const response = await this.identityRefreshPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async identityRegisterPOSTRaw(requestParameters: IdentityRegisterPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async identityRegisterPOST(requestParameters: IdentityRegisterPOSTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.identityRegisterPOSTRaw(requestParameters, initOverrides);
    }

    /**
     */
    async identityResendConfirmationEmailPOSTRaw(requestParameters: IdentityResendConfirmationEmailPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/resendConfirmationEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendConfirmationEmailRequestToJSON(requestParameters['resendConfirmationEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async identityResendConfirmationEmailPOST(requestParameters: IdentityResendConfirmationEmailPOSTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.identityResendConfirmationEmailPOSTRaw(requestParameters, initOverrides);
    }

    /**
     */
    async identityResetPasswordPOSTRaw(requestParameters: IdentityResetPasswordPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/identity/resetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters['resetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async identityResetPasswordPOST(requestParameters: IdentityResetPasswordPOSTRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.identityResetPasswordPOSTRaw(requestParameters, initOverrides);
    }

}
