/* tslint:disable */
/* eslint-disable */
/**
 * DevBook.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateBookCommand,
  PatchBookCommandDto,
  UpdateBookCommandDto,
} from '../models/index';
import {
    CreateBookCommandFromJSON,
    CreateBookCommandToJSON,
    PatchBookCommandDtoFromJSON,
    PatchBookCommandDtoToJSON,
    UpdateBookCommandDtoFromJSON,
    UpdateBookCommandDtoToJSON,
} from '../models/index';

export interface BooksCreateRequest {
    createBookCommand: CreateBookCommand;
}

export interface BooksPatchRequest {
    id: string;
    patchBookCommandDto: PatchBookCommandDto;
}

export interface BooksUpdateRequest {
    id: string;
    updateBookCommandDto: UpdateBookCommandDto;
}

/**
 * 
 */
export class BookStoreModuleBookEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async booksCreateRaw(requestParameters: BooksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createBookCommand'] == null) {
            throw new runtime.RequiredError(
                'createBookCommand',
                'Required parameter "createBookCommand" was null or undefined when calling booksCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBookCommandToJSON(requestParameters['createBookCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async booksCreate(requestParameters: BooksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.booksCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async booksPatchRaw(requestParameters: BooksPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling booksPatch().'
            );
        }

        if (requestParameters['patchBookCommandDto'] == null) {
            throw new runtime.RequiredError(
                'patchBookCommandDto',
                'Required parameter "patchBookCommandDto" was null or undefined when calling booksPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchBookCommandDtoToJSON(requestParameters['patchBookCommandDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async booksPatch(requestParameters: BooksPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.booksPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async booksUpdateRaw(requestParameters: BooksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling booksUpdate().'
            );
        }

        if (requestParameters['updateBookCommandDto'] == null) {
            throw new runtime.RequiredError(
                'updateBookCommandDto',
                'Required parameter "updateBookCommandDto" was null or undefined when calling booksUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBookCommandDtoToJSON(requestParameters['updateBookCommandDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async booksUpdate(requestParameters: BooksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.booksUpdateRaw(requestParameters, initOverrides);
    }

}
