/* tslint:disable */
/* eslint-disable */
/**
 * DevBook.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Author,
  CreateAuthorCommand,
  PatchAuthorCommandDto,
  UpdateAuthorCommandDto,
} from '../models/index';
import {
    AuthorFromJSON,
    AuthorToJSON,
    CreateAuthorCommandFromJSON,
    CreateAuthorCommandToJSON,
    PatchAuthorCommandDtoFromJSON,
    PatchAuthorCommandDtoToJSON,
    UpdateAuthorCommandDtoFromJSON,
    UpdateAuthorCommandDtoToJSON,
} from '../models/index';

export interface AuthorsCreateRequest {
    createAuthorCommand: CreateAuthorCommand;
}

export interface AuthorsDeleteRequest {
    id: string;
}

export interface AuthorsGetAllRequest {
    pageSize?: number;
    offset?: number;
}

export interface AuthorsGetByIdRequest {
    id: string;
}

export interface AuthorsPatchRequest {
    id: string;
    patchAuthorCommandDto: PatchAuthorCommandDto;
}

export interface AuthorsUpdateRequest {
    id: string;
    updateAuthorCommandDto: UpdateAuthorCommandDto;
}

/**
 * 
 */
export class BookStoreModuleAuthorEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async authorsCreateRaw(requestParameters: AuthorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createAuthorCommand'] == null) {
            throw new runtime.RequiredError(
                'createAuthorCommand',
                'Required parameter "createAuthorCommand" was null or undefined when calling authorsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/authors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuthorCommandToJSON(requestParameters['createAuthorCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authorsCreate(requestParameters: AuthorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authorsCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authorsDeleteRaw(requestParameters: AuthorsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authorsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authorsDelete(requestParameters: AuthorsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authorsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authorsGetAllRaw(requestParameters: AuthorsGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Author>>> {
        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['Offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/authors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuthorFromJSON));
    }

    /**
     */
    async authorsGetAll(requestParameters: AuthorsGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Author>> {
        const response = await this.authorsGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authorsGetByIdRaw(requestParameters: AuthorsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Author>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authorsGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorFromJSON(jsonValue));
    }

    /**
     */
    async authorsGetById(requestParameters: AuthorsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Author> {
        const response = await this.authorsGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authorsPatchRaw(requestParameters: AuthorsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authorsPatch().'
            );
        }

        if (requestParameters['patchAuthorCommandDto'] == null) {
            throw new runtime.RequiredError(
                'patchAuthorCommandDto',
                'Required parameter "patchAuthorCommandDto" was null or undefined when calling authorsPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchAuthorCommandDtoToJSON(requestParameters['patchAuthorCommandDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authorsPatch(requestParameters: AuthorsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authorsPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authorsUpdateRaw(requestParameters: AuthorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authorsUpdate().'
            );
        }

        if (requestParameters['updateAuthorCommandDto'] == null) {
            throw new runtime.RequiredError(
                'updateAuthorCommandDto',
                'Required parameter "updateAuthorCommandDto" was null or undefined when calling authorsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuthorCommandDtoToJSON(requestParameters['updateAuthorCommandDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authorsUpdate(requestParameters: AuthorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authorsUpdateRaw(requestParameters, initOverrides);
    }

}
