/* tslint:disable */
/* eslint-disable */
/**
 * DevBook.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWorkTaskInput,
  PatchWorkTaskCommandDto,
  StartWorkTaskInput,
  UpdateWorkTaskCommandDto,
  WorkTaskDto,
  WorkTaskListResponse,
} from '../models/index';
import {
    CreateWorkTaskInputFromJSON,
    CreateWorkTaskInputToJSON,
    PatchWorkTaskCommandDtoFromJSON,
    PatchWorkTaskCommandDtoToJSON,
    StartWorkTaskInputFromJSON,
    StartWorkTaskInputToJSON,
    UpdateWorkTaskCommandDtoFromJSON,
    UpdateWorkTaskCommandDtoToJSON,
    WorkTaskDtoFromJSON,
    WorkTaskDtoToJSON,
    WorkTaskListResponseFromJSON,
    WorkTaskListResponseToJSON,
} from '../models/index';

export interface WorkTasksCreateRequest {
    createWorkTaskInput: CreateWorkTaskInput;
}

export interface WorkTasksDeleteRequest {
    id: string;
}

export interface WorkTasksGetByIdRequest {
    id: string;
}

export interface WorkTasksPatchRequest {
    id: string;
    patchWorkTaskCommandDto: PatchWorkTaskCommandDto;
}

export interface WorkTasksStartRequest {
    startWorkTaskInput: StartWorkTaskInput;
}

export interface WorkTasksUpdateRequest {
    id: string;
    updateWorkTaskCommandDto: UpdateWorkTaskCommandDto;
}

/**
 * 
 */
export class TimeTrackingModuleWorkTaskEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async workTasksCreateRaw(requestParameters: WorkTasksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createWorkTaskInput'] == null) {
            throw new runtime.RequiredError(
                'createWorkTaskInput',
                'Required parameter "createWorkTaskInput" was null or undefined when calling workTasksCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkTaskInputToJSON(requestParameters['createWorkTaskInput']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async workTasksCreate(requestParameters: WorkTasksCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workTasksCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async workTasksDeleteRaw(requestParameters: WorkTasksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workTasksDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async workTasksDelete(requestParameters: WorkTasksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workTasksDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async workTasksGetByIdRaw(requestParameters: WorkTasksGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkTaskDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workTasksGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkTaskDtoFromJSON(jsonValue));
    }

    /**
     */
    async workTasksGetById(requestParameters: WorkTasksGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkTaskDto> {
        const response = await this.workTasksGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async workTasksListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkTaskListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkTaskListResponseFromJSON(jsonValue));
    }

    /**
     */
    async workTasksList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkTaskListResponse> {
        const response = await this.workTasksListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async workTasksPatchRaw(requestParameters: WorkTasksPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workTasksPatch().'
            );
        }

        if (requestParameters['patchWorkTaskCommandDto'] == null) {
            throw new runtime.RequiredError(
                'patchWorkTaskCommandDto',
                'Required parameter "patchWorkTaskCommandDto" was null or undefined when calling workTasksPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchWorkTaskCommandDtoToJSON(requestParameters['patchWorkTaskCommandDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async workTasksPatch(requestParameters: WorkTasksPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workTasksPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async workTasksStartRaw(requestParameters: WorkTasksStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startWorkTaskInput'] == null) {
            throw new runtime.RequiredError(
                'startWorkTaskInput',
                'Required parameter "startWorkTaskInput" was null or undefined when calling workTasksStart().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartWorkTaskInputToJSON(requestParameters['startWorkTaskInput']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async workTasksStart(requestParameters: WorkTasksStartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workTasksStartRaw(requestParameters, initOverrides);
    }

    /**
     */
    async workTasksUpdateRaw(requestParameters: WorkTasksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workTasksUpdate().'
            );
        }

        if (requestParameters['updateWorkTaskCommandDto'] == null) {
            throw new runtime.RequiredError(
                'updateWorkTaskCommandDto',
                'Required parameter "updateWorkTaskCommandDto" was null or undefined when calling workTasksUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkTaskCommandDtoToJSON(requestParameters['updateWorkTaskCommandDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async workTasksUpdate(requestParameters: WorkTasksUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.workTasksUpdateRaw(requestParameters, initOverrides);
    }

}
