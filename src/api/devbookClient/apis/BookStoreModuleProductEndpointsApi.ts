/* tslint:disable */
/* eslint-disable */
/**
 * DevBook.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProductsGetAll200ResponseInner,
} from '../models/index';
import {
    ProductsGetAll200ResponseInnerFromJSON,
    ProductsGetAll200ResponseInnerToJSON,
} from '../models/index';

export interface ProductsDeleteRequest {
    id: string;
}

export interface ProductsGetAllRequest {
    pageSize?: number;
    offset?: number;
    productCategoryId?: string;
}

export interface ProductsGetByIdRequest {
    id: string;
}

/**
 * 
 */
export class BookStoreModuleProductEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async productsDeleteRaw(requestParameters: ProductsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async productsDelete(requestParameters: ProductsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async productsGetAllRaw(requestParameters: ProductsGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductsGetAll200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['Offset'] = requestParameters['offset'];
        }

        if (requestParameters['productCategoryId'] != null) {
            queryParameters['ProductCategoryId'] = requestParameters['productCategoryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductsGetAll200ResponseInnerFromJSON));
    }

    /**
     */
    async productsGetAll(requestParameters: ProductsGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductsGetAll200ResponseInner>> {
        const response = await this.productsGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productsGetByIdRaw(requestParameters: ProductsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductsGetAll200ResponseInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productsGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bookstore/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductsGetAll200ResponseInnerFromJSON(jsonValue));
    }

    /**
     */
    async productsGetById(requestParameters: ProductsGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductsGetAll200ResponseInner> {
        const response = await this.productsGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
